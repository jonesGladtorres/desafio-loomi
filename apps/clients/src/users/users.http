### Arquivo de teste para a API de Usu치rios
### Use com REST Client (VSCode Extension) ou ferramentas como Postman/Insomnia
### 
### IMPORTANTE: Os endpoints GET est칚o com cache Redis habilitado!
### - Primeira requisi칞칚o: busca do banco
### - Requisi칞칫es subsequentes: retorna do cache (muito mais r치pido)
### - Cache expira ap칩s 60 segundos ou ao modificar dados

@baseUrl = http://localhost:3001
@contentType = application/json

### Criar um novo usu치rio
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Jo칚o Silva",
  "email": "joao.silva@example.com",
  "cpf": "123.456.789-00",
  "phone": "(11) 98765-4321",
  "address": "Rua das Flores, 123",
  "city": "S칚o Paulo",
  "state": "SP",
  "zipCode": "01234-567"
}

### Buscar todos os usu치rios (com cache)
# Primeira requisi칞칚o: busca do banco e cacheia
# Requisi칞칫es seguintes: retorna do cache (muito mais r치pido!)
GET {{baseUrl}}/api/users

### Buscar todos os usu치rios novamente (do cache)
# Esta requisi칞칚o deve ser MUITO mais r치pida
GET {{baseUrl}}/api/users

### Buscar usu치rio por ID (com cache)
# Substitua {userId} por um ID v치lido
# Exemplo: GET {{baseUrl}}/api/users/123e4567-e89b-12d3-a456-426614174000
GET {{baseUrl}}/api/users/{userId}

### Buscar o mesmo usu치rio novamente (do cache)
# Esta requisi칞칚o retorna do cache
GET {{baseUrl}}/api/users/{userId}

### Atualizar um usu치rio (atualiza칞칚o parcial)
# Substitua {userId} por um ID v치lido
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "name": "Jo칚o Silva Atualizado",
  "phone": "(11) 91234-5678"
}

### Atualizar apenas o email do usu치rio
# Substitua {userId} por um ID v치lido
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "email": "joao.novo@example.com"
}

### Atualizar endere칞o completo do usu치rio
# Substitua {userId} por um ID v치lido
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "address": "Avenida Paulista, 1000",
  "city": "S칚o Paulo",
  "state": "SP",
  "zipCode": "01310-100"
}

### Deletar um usu치rio
# Substitua {userId} por um ID v치lido
# IMPORTANTE: Isso invalidar치 o cache do usu치rio e da lista!
DELETE {{baseUrl}}/api/users/{userId}

### ============================================
### TESTES DE RABBITMQ (Comunica칞칚o Ass칤ncrona)
### ============================================

### Teste RabbitMQ 1: Atualizar dados banc치rios (dispara evento)
# IMPORTANTE: Verifique os logs do app transactions ap칩s executar
# Deve mostrar: "游닌 Evento recebido: user_banking_updated"
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "name": "Jo칚o Silva - Atualizado via RabbitMQ",
  "email": "joao.atualizado@example.com"
}

### Teste RabbitMQ 2: Atualizar m칰ltiplos campos banc치rios
# Verifica o array updatedFields no log do Transactions App
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "name": "Maria Santos",
  "phone": "(21) 98765-4321",
  "address": "Rua Nova, 456",
  "city": "Rio de Janeiro"
}

### Teste RabbitMQ 3: Atualizar apenas CPF
# Campo banc치rio sens칤vel - deve disparar evento
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "cpf": "987.654.321-00"
}

### ============================================
### TESTES DE CACHE
### ============================================

### Teste 1: Verificar cache funcionando
# 1. Execute a requisi칞칚o abaixo 2 vezes
# 2. A segunda deve ser MUITO mais r치pida
GET {{baseUrl}}/api/users

### Teste 2: Verificar invalida칞칚o de cache
# 1. Execute GET acima para criar o cache
# 2. Execute o PATCH abaixo para invalidar
# 3. Execute GET novamente - deve buscar do banco novamente
PATCH {{baseUrl}}/api/users/{userId}
Content-Type: {{contentType}}

{
  "name": "Teste de Cache"
}

### Teste 3: Verificar cache ap칩s cria칞칚o
# 1. Execute GET para cachear
# 2. Crie um novo usu치rio abaixo
# 3. Execute GET novamente - cache foi invalidado, lista atualizada
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Novo Usu치rio",
  "email": "novo@example.com"
}

