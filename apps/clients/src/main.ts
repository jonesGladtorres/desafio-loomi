import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ClientsModule } from './clients.module';
import helmet from 'helmet';
import { helmetConfig } from '@app/security/config/helmet.config';
import { corsConfig } from '@app/security/config/cors.config';

async function bootstrap() {
  const app = await NestFactory.create(ClientsModule);

  // ====================================
  // SEGURAN√áA
  // ====================================

  // Helmet - Prote√ß√£o de Headers HTTP
  app.use(helmet(helmetConfig));

  // CORS - Controle de Origem Cruzada
  app.enableCors(corsConfig);

  // Habilita valida√ß√£o global de DTOs
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      disableErrorMessages: process.env.NODE_ENV === 'production', // Esconde detalhes em produ√ß√£o
    }),
  );

  // Configura√ß√£o do Swagger
  const config = new DocumentBuilder()
    .setTitle('Loomi - Users API')
    .setDescription(
      `API REST para gerenciamento completo de usu√°rios e clientes.
      
**Funcionalidades:**
- ‚úÖ CRUD completo de usu√°rios
- ‚úÖ Valida√ß√£o de CPF
- ‚úÖ Upload de foto de perfil
- ‚úÖ Gerenciamento de dados banc√°rios
- ‚úÖ Cache com Redis para performance
- ‚úÖ Eventos ass√≠ncronos via RabbitMQ

**Seguran√ßa:**
- üîí Autentica√ß√£o obrigat√≥ria via API Key
- üõ°Ô∏è Rate Limiting (10/seg, 100/min, 1000/hora)
- üîê Headers de seguran√ßa (Helmet)
- üö´ Prote√ß√£o XSS e sanitiza√ß√£o de dados
- üìù Auditoria completa de requisi√ß√µes

**Como usar a API Key:**
1. Obtenha uma API Key v√°lida
2. Adicione no header: \`X-API-Key: sua-chave\`
3. Ou use: \`Authorization: Bearer sua-chave\``,
    )
    .setVersion('1.0.0')
    .setContact(
      'Jones Torres',
      'https://github.com/jonesGladtorres',
      'jonestorresadv@icloud.com',
    )
    .addApiKey(
      {
        type: 'apiKey',
        name: 'X-API-Key',
        in: 'header',
        description:
          'API Key para autentica√ß√£o (formato: X-API-Key: loomi-dev-key-123)',
      },
      'X-API-Key',
    )
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'API-Key',
        description:
          'API Key para autentica√ß√£o (formato: Bearer loomi-dev-key-123)',
      },
      'Bearer',
    )
    .addTag('users', 'Opera√ß√µes de CRUD para gerenciamento de usu√°rios')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs/users', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
      tagsSorter: 'alpha',
      operationsSorter: 'alpha',
    },
  });

  const port = process.env.PORT ?? 3001;
  await app.listen(port);
  console.log(`üöÄ Users app is running on: http://localhost:${port}`);
  console.log(
    `üìö Swagger docs available at: http://localhost:${port}/api/docs/users`,
  );
}
void bootstrap();
